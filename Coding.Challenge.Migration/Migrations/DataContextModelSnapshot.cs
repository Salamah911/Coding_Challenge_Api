// <auto-generated />
using System;
using Coding.Challenge.Migration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Coding.Challenge.Migration.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Coding.Challenge.Migration.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CapitalCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Coding.Challenge.Migration.Models.Currencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Coding.Challenge.Migration.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TimeZone")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Coding.Challenge.Migration.Models.Country", b =>
                {
                    b.HasOne("Coding.Challenge.Migration.Models.Country", null)
                        .WithMany("BorderingCoutries")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Coding.Challenge.Migration.Models.Currencies", b =>
                {
                    b.HasOne("Coding.Challenge.Migration.Models.Country", null)
                        .WithMany("Currencies")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Coding.Challenge.Migration.Models.Zone", b =>
                {
                    b.HasOne("Coding.Challenge.Migration.Models.Country", null)
                        .WithMany("TimeZones")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Coding.Challenge.Migration.Models.Country", b =>
                {
                    b.Navigation("BorderingCoutries");

                    b.Navigation("Currencies");

                    b.Navigation("TimeZones");
                });
#pragma warning restore 612, 618
        }
    }
}
